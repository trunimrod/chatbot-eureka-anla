# 2_app_chatbot.py (Versi√≥n con Vista de Administrador para Depuraci√≥n)

# --- PARCHE ROBUSTO PARA SQLITE3 EN STREAMLIT CLOUD ---
try:
    __import__('pysqlite3')
    import sys as _sys
    _sys.modules['sqlite3'] = _sys.modules.pop('pysqlite3')
except (ImportError, KeyError) as e:
    # Si pysqlite3 no est√° disponible, continuar con SQLite3 est√°ndar
    print(f"Advertencia: No se pudo aplicar parche pysqlite3: {e}")
    print("Continuando con SQLite3 est√°ndar...")
# --- FIN DEL PARCHE ---

import os 
import re
from typing import Dict, Any, Iterable

import streamlit as st
import requests

from langchain_chroma import Chroma
from langchain_ollama.embeddings import OllamaEmbeddings
from langchain_ollama import OllamaLLM
from langchain.prompts import PromptTemplate
from langchain_core.output_parsers import StrOutputParser

# =====================
# PROMPTS (AJUSTE FINAL Y M√ÅS ESTRICTO)
# =====================
EXTRACTOR_PROMPT = """
Eres un experto analista de la ANLA. Tu tarea es extraer la informaci√≥n f√°ctica y t√©cnica m√°s relevante de los documentos proporcionados para responder a la pregunta del usuario.

**Instrucciones:**
1.  **Enf√≥cate en lo t√©cnico:** Extrae datos, art√≠culos de ley, n√∫meros de resoluci√≥n, procedimientos y obligaciones concretas.
2.  **S√© conciso y directo:** No uses lenguaje introductorio. Ve directo al grano.
3.  **Cita la fuente y el nombre del documento:** Si un dato proviene de un documento (ej. `[DOC 1]`), menci√≥nalo junto con su t√≠tulo si est√° disponible (ej. `[DOC 1, Sentencia T-704 de 2016]`). ESTE PASO ES OBLIGATORIO para cada pieza de informaci√≥n que extraigas.
4.  **Se√±ala el contexto espec√≠fico:** Es CRUCIAL que si la informaci√≥n se refiere a un caso, proyecto o tipo de programa concreto (ej. 'Mina El Cerrej√≥n', 'Pago por Servicios Ambientales', 'Comunidad Media Luna Dos'), lo menciones expl√≠citamente en la extracci√≥n. Ejemplo: "En el caso del proyecto minero El Cerrej√≥n, se estableci√≥ el derecho a la consulta previa [DOC 1, Sentencia T-704 de 2016]".
5.  **No interpretes ni converses:** Tu salida debe ser un resumen denso de hechos y datos extra√≠dos.
6.  **Si no hay informaci√≥n:** Si los documentos no contienen informaci√≥n relevante para responder, indica claramente: "No he encontrado informaci√≥n relevante en los documentos proporcionados."

**Documentos:**
---
{context}
---

**Pregunta del usuario:** {question}

**Extracci√≥n t√©cnica:**
"""

EUREKA_PROMPT = """
Eres Eureka, un asistente ciudadano de la ANLA. Tu misi√≥n es ser 100% fiel a la informaci√≥n que se te proporciona, ayudando a los ciudadanos de forma clara y precisa.

*** REGLA DE ORO INQUEBRANTABLE: TU OBJETIVO PRINCIPAL ES EVITAR LA "ALUCINACI√ìN". ***
- **NUNCA, bajo ninguna circunstancia, inventes un n√∫mero de ley, decreto, sentencia o cualquier tipo de cita.** Esto es un error cr√≠tico que desinforma al ciudadano. Si el resumen t√©cnico no te da un n√∫mero espec√≠fico, OBLIGATORIAMENTE debes usar expresiones generales como "la normativa ambiental vigente" o "la jurisprudencia ha se√±alado".
- **CITA DIRECTAMENTE TUS FUENTES DENTRO DEL TEXTO.** Cada afirmaci√≥n que hagas debe estar respaldada por el resumen t√©cnico. DEBES mencionar la fuente (el t√≠tulo del documento) directamente en la frase. Por ejemplo: **"La Sentencia T-704 de 2016 establece que..."** o **"Seg√∫n la Declaraci√≥n de R√≠o sobre el Medio Ambiente..."**. No puedes hacer una afirmaci√≥n y luego listar las fuentes solo al final. La cita debe estar en la frase misma.
- **NO GENERALICES.** Si la informaci√≥n proviene de un caso espec√≠fico (ej. 'proyecto minero El Cerrej√≥n'), DEBES decirlo. Ejemplo: "En el caso espec√≠fico del proyecto minero El Cerrej√≥n, la Sentencia T-704 de 2016 reconoci√≥ el derecho a la consulta previa...".
- **TU √öNICA FUENTE DE VERDAD ES EL SIGUIENTE RESUMEN T√âCNICO.** Basa tu respuesta 100% y √öNICAMENTE en este resumen. No uses ning√∫n conocimiento externo.

**Instrucciones adicionales:**
- Traduce el lenguaje t√©cnico del resumen a un lenguaje claro y sencillo.
- Usa listas y **negritas** para que la informaci√≥n sea f√°cil de leer.
- Si el resumen indica que no hay informaci√≥n, responde amablemente: "Hola, no he encontrado informaci√≥n precisa sobre lo que me preguntas. ¬øPodr√≠as intentar con otras palabras?".

**Resumen t√©cnico para Eureka:**
---
{respuesta_tecnica}
---

**Pregunta original del usuario:** {question}

**Respuesta de Eureka:**
"""


# =====================
# Configuraci√≥n
# =====================
DIRECTORIO_CHROMA_DB = os.environ.get("CHROMA_DB_DIR", "chroma_db")
MODELO_EMBEDDING = os.environ.get("EMBED_MODEL", "nomic-embed-text")
MODELO_LLM = os.environ.get("LLM_MODEL", "llama3.2")
NOMBRE_COLECCION = "sentencias_anla" 

# Par√°metros MMR optimizados para mayor relevancia
K_DOCUMENTOS = 5
FETCH_K = 25
MMR_LAMBDA = 0.5

# Contexto
MAX_CONTEXT_CHARS = 12000

st.set_page_config(page_title="Eureka ‚Äî ANLA", page_icon="üí¨", layout="centered")

# =====================
# Utilidades b√°sicas
# =====================
def limitar_contexto(documentos, max_chars: int) -> str:
    """Combina documentos respetando l√≠mite de caracteres"""
    piezas, total = [], 0
    for i, d in enumerate(documentos, 1):
        txt = (d.page_content or "").strip()
        header = f"\n\n[DOC {i}, T√≠tulo: {d.metadata.get('title', 'N/A')}]\n"
        chunk = header + txt
        if total + len(chunk) > max_chars:
            restante = max_chars - total
            if restante > len(header):
                piezas.append(header + txt[: restante - len(header)])
            break
        piezas.append(chunk); total += len(chunk)
    return "".join(piezas).strip()

def _safe_get_source(doc):
    """Extrae fuente del documento de forma segura"""
    src = (doc.metadata or {}).get("source")
    return src or "Fuente no encontrada"

# ======== Clasificador de intenci√≥n simple ========
_GREET_WORDS = ["hola","holi","hello","hey","buenas","buenos d√≠as","buenas tardes","buenas noches"]
_SMALLTALK_PAT = re.compile(r"(c√≥mo est√°s|que tal|qu√© tal|gracias|de nada|ok|vale|listo|perfecto)", re.I)
_QWORDS_PAT = re.compile(r"\b(qu√©|que|c√≥mo|como|cu√°l|cual|cu√°ndo|cuando|d√≥nde|donde|por qu√©|porque|qui√©n|quien|cu√°nto|cuanto)\b", re.I)

def clasificar_intencion(texto: str) -> str:
    """Clasificador simple para evitar RAG en saludos"""
    t = (texto or "").strip()
    tl = t.lower()
    if not tl:
        return "vacio"
    if any(tl.startswith(w) or w in tl for w in _GREET_WORDS):
        if "?" not in tl and not _QWORDS_PAT.search(tl) and len(tl.split()) <= 4:
            return "saludo"
    if _SMALLTALK_PAT.search(tl):
        return "charla"
    # palabras clave del dominio
    dom_kw = ["anla","licencia","licenciamiento","ambiental","eia","pma","permiso","resoluci√≥n","audiencia",
              "sustracci√≥n","forestal","vertimiento","ruido","emisi√≥n","mina","hidrocarburos","energ√≠a","proyecto",
              "evaluaci√≥n","impacto","autoridad","tr√°mite","expediente","compensaci√≥n","participaci√≥n","consulta"]
    if _QWORDS_PAT.search(tl) or "?" in tl or any(k in tl for k in dom_kw):
        return "consulta"
    return "indeterminado"

# ======== Conexi√≥n Ollama ========
def _get_query_param(name: str) -> str:
    try:
        return st.query_params.get(name, "")
    except Exception:
        try:
            return st.experimental_get_query_params().get(name, [""])[0]
        except Exception:
            return ""

def _normalize_base_url(url: str) -> str:
    base = (url or "").strip()
    if not base:
        raise ValueError("No se proporcion√≥ URL p√∫blica para Ollama.")
    if "://" not in base:
        base = "https://" + base
    base = base.rstrip("/")
    if any(h in base for h in ["localhost", "127.0.0.1", "0.0.0.0"]):
        raise ValueError("La URL apunta a host local. Usa la URL p√∫blica (ngrok/Cloudflare).")
    return base

def _health_check_ollama(base: str, timeout: float = 5.0):
    try:
        r = requests.get(f"{base}/api/tags", timeout=timeout)
        r.raise_for_status()
        return True, "OK"
    except Exception as e:
        return False, f"{type(e).__name__}: {e}"

# =====================
# Helpers de prompts
# =====================
def _ensure_prompt(tpl_or_prompt):
    if isinstance(tpl_or_prompt, str):
        return PromptTemplate.from_template(tpl_or_prompt)
    return tpl_or_prompt

def _build_kwargs_for_prompt(prompt: PromptTemplate, **values: Any) -> Dict[str, Any]:
    """Mapea variables de prompt autom√°ticamente"""
    wanted = set(getattr(prompt, "input_variables", []) or [])
    out: Dict[str, Any] = {}

    def pick(cands: Iterable[str], key: str):
        for c in cands:
            if c in wanted and key in values:
                out[c] = values[key]; return

    pick(["context", "contexto", "context_text"], "context")
    pick(["question", "pregunta", "query", "user_question", "original_question"], "question")
    pick(["respuesta_tecnica", "technical_answer", "answer", "summary", "respuesta", "technical_summary"], "respuesta_tecnica")
    return out

# =====================
# Carga de componentes
# =====================
@st.cache_resource(show_spinner=False)
def cargar_componentes(base_url: str):
    ok, detail = _health_check_ollama(base_url)
    if not ok:
        raise RuntimeError(f"No puedo conectarme a Ollama en {base_url}. Detalle: {detail}")
    embeddings = OllamaEmbeddings(model=MODELO_EMBEDDING, base_url=base_url)
    db = Chroma(
        persist_directory=DIRECTORIO_CHROMA_DB, 
        embedding_function=embeddings,
        collection_name=NOMBRE_COLECCION
    )
    llm_extract = OllamaLLM(model=MODELO_LLM, temperature=0.2, base_url=base_url)
    llm_eureka_stream = OllamaLLM(model=MODELO_LLM, temperature=0.2, base_url=base_url, streaming=True)
    return embeddings, db, llm_extract, llm_eureka_stream

@st.cache_resource(show_spinner=False)
def construir_cadenas(llm_extract: OllamaLLM, llm_eureka_stream: OllamaLLM):
    extractor_pt = _ensure_prompt(EXTRACTOR_PROMPT)
    eureka_pt = _ensure_prompt(EUREKA_PROMPT)
    extractor = extractor_pt | llm_extract | StrOutputParser()
    eureka_stream_chain = eureka_pt | llm_eureka_stream | StrOutputParser()
    return extractor, eureka_stream_chain, extractor_pt, eureka_pt

def crear_retriever(db: Chroma):
    """Retriever simple con MMR"""
    params = {"k": K_DOCUMENTOS, "fetch_k": FETCH_K, "lambda_mult": MMR_LAMBDA}
    retriever = db.as_retriever(search_type="mmr", search_kwargs=params)
    return retriever, params

def contar_indice(db: Chroma) -> int:
    """Cuenta documentos en el √≠ndice"""
    try:
        if hasattr(db, "_collection") and db._collection is not None:
            return int(db._collection.count())
    except Exception:
        pass
    try:
        res = db.similarity_search("prueba", k=1)
        return 1 if res else 0
    except Exception:
        return 0

# =====================
# UI
# =====================
st.title("Eureka ‚Äî ANLA ¬∑ Asistente ciudadano")
st.caption("Te ayudo a entender tus derechos y deberes ambientales.")

# ---- Sidebar: Conexi√≥n a Ollama ----
with st.sidebar:
    st.subheader("Conexi√≥n a Ollama")
    url_param = _get_query_param("ollama")
    if url_param and "ollama_input" not in st.session_state:
        st.session_state["ollama_input"] = url_param

    default_text = st.session_state.get("ollama_input", os.environ.get("OLLAMA_HOST", "").strip())
    ollama_input = st.text_input(
        "URL p√∫blica (ngrok/Cloudflare)",
        value=default_text,
        placeholder="https://xxxx.ngrok-free.app",
        help="Ejemplo: https://6682052ab53b.ngrok-free.app",
        key="ollama_input",
    )
    col1, col2 = st.columns(2)
    with col1:
        if st.button("Conectar a Ollama", use_container_width=True):
            try:
                candidate = _normalize_base_url(ollama_input)
                ok, detail = _health_check_ollama(candidate)
                if ok:
                    st.session_state["ollama_base"] = candidate
                    st.success("Conectado ‚úÖ")
                else:
                    st.error(f"No conecta: {detail}")
            except Exception as e:
                st.error(f"URL inv√°lida: {e}")
    with col2:
        if st.button("Probar /api/tags", use_container_width=True):
            try:
                candidate = _normalize_base_url(ollama_input)
                ok, detail = _health_check_ollama(candidate)
                st.info(f"Resultado: {'OK' if ok else 'FALLO'} ‚Ä¢ {detail}")
            except Exception as e:
                st.error(f"Error: {e}")

    if "ollama_base" in st.session_state:
        st.caption(f"Usando: `{st.session_state['ollama_base']}`")
        
    st.divider()
    st.subheader("Ejemplos de uso")
    st.write("**Preguntas generales:**")
    st.write("‚Ä¢ ¬øQu√© derechos tengo si un proyecto me afecta?")
    st.write("‚Ä¢ ¬øC√≥mo participar en decisiones ambientales?")
    st.write("‚Ä¢ ¬øQu√© compensaciones puede recibir una comunidad?")

# ---- Sin conexi√≥n: detener ----
if "ollama_base" not in st.session_state:
    st.info("üí° Pega la URL p√∫blica de tu t√∫nel (ngrok/Cloudflare) y pulsa **Conectar a Ollama**.")
    st.stop()

# ---- Cargar componentes ----
try:
    embeddings, db, llm_extract, llm_eureka_stream = cargar_componentes(st.session_state["ollama_base"])
except Exception as e:
    st.error(f"‚åê No se pudo conectar con Ollama: {e}")
    st.stop()

extractor_chain, eureka_stream_chain, extractor_pt, eureka_pt = construir_cadenas(llm_extract, llm_eureka_stream)

indice_docs = contar_indice(db)
if indice_docs == 0:
    st.warning("No encuentro documentos en el √≠ndice (Chroma). Verifica que la carpeta `chroma_db` est√© disponible.")

# ---- Historial ----
if "messages" not in st.session_state:
    st.session_state.messages = [
        {"role": "assistant", "content": "Hola, soy Eureka. Te ayudo a entender tus derechos ambientales y c√≥mo participar en las decisiones que te pueden afectar. ¬øEn qu√© puedo ayudarte hoy?"}
    ]

for msg in st.session_state.messages:
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"])

# ---- Chat ----
user_q = st.chat_input("Escribe tu pregunta‚Ä¶")
if user_q:
    st.session_state.messages.append({"role": "user", "content": user_q})
    with st.chat_message("user"):
        st.markdown(user_q)

    # === Filtro de intenci√≥n mejorado para mantener contexto ===
    intent = clasificar_intencion(user_q)
    
    # Solo mostrar respuesta gen√©rica para saludos genuinamente nuevos
    if intent in ("saludo", "charla") and len(st.session_state.messages) <= 2:
        # Solo si es realmente el inicio de la conversaci√≥n
        sugerencias = (
            "¬øSobre qu√© tema ambiental te gustar√≠a saber?\n\n"
            "**Ejemplos:**\n"
            "‚Ä¢ ¬øQu√© es la licencia ambiental y cu√°ndo se requiere?\n"
            "‚Ä¢ ¬øC√≥mo consultar el estado de un expediente en la ANLA?\n"
            "‚Ä¢ ¬øQu√© pasos siguen para una Evaluaci√≥n de Impacto Ambiental?"
        )
        respuesta_breve = "¬°Hola! üëã Estoy listo para ayudarte sobre licenciamiento y tr√°mites ambientales.\n\n" + sugerencias
        with st.chat_message("assistant"):
            st.markdown(respuesta_breve)
        st.session_state.messages.append({"role": "assistant", "content": respuesta_breve})
        st.stop()
    
    # Para respuestas muy cortas, expandir la consulta con contexto
    if len(user_q.strip()) <= 10 and len(st.session_state.messages) > 2:
        # Obtener la √∫ltima pregunta del asistente para dar contexto
        last_assistant_msg = ""
        for msg in reversed(st.session_state.messages):
            if msg["role"] == "assistant":
                last_assistant_msg = msg["content"]
                break
        
        # Si la respuesta corta sigue a una pregunta espec√≠fica, expandir contexto
        if "?" in last_assistant_msg:
            user_q = f"{user_q}. Contexto: respondiendo a la pregunta sobre derechos y procedimientos ambientales"

    # === RAG Principal ===
    with st.chat_message("assistant"):
        with st.spinner("Buscando informaci√≥n y preparando respuesta‚Ä¶"):
            try:
                # B√∫squeda de documentos
                retriever, params = crear_retriever(db)
                docs = retriever.invoke(user_q)

                if not docs:
                    st.info("No encontr√© informaci√≥n relevante sobre tu consulta. ¬øPodr√≠as reformular la pregunta?")
                    st.stop()

                # Crear contexto
                contexto = limitar_contexto(docs, MAX_CONTEXT_CHARS)

                # Paso 1: Extracci√≥n t√©cnica
                extractor_kwargs = _build_kwargs_for_prompt(
                    extractor_pt,
                    context=contexto,
                    question=user_q,
                )
                resp_tecnica = extractor_chain.invoke(extractor_kwargs)

                # Paso 2: Traducci√≥n a lenguaje claro con STREAMING
                eureka_kwargs = _build_kwargs_for_prompt(
                    eureka_pt,
                    respuesta_tecnica=resp_tecnica,
                    question=user_q,
                )
                
                contenedor = st.empty()
                acumulado = ""
                for chunk in eureka_stream_chain.stream(eureka_kwargs):
                    acumulado += chunk
                    contenedor.markdown(acumulado)
                
                respuesta_final = acumulado

                # Agregar fuentes (L√≥gica Mejorada y Precisa)
                fuentes_citadas = set()
                # Extraer los √≠ndices de los documentos realmente usados desde la respuesta t√©cnica
                indices_usados = re.findall(r'\[DOC (\d+)', resp_tecnica)

                if indices_usados:
                    # Construir la lista de fuentes a partir de los √≠ndices encontrados
                    for i_str in set(indices_usados): # Usar set para evitar duplicados
                        try:
                            index = int(i_str) - 1
                            if 0 <= index < len(docs):
                                fuente = _safe_get_source(docs[index])
                                if fuente != "Fuente no encontrada":
                                    fuentes_citadas.add(fuente)
                        except (ValueError, IndexError):
                            continue
                
                # Fallback: si no hay tags pero s√≠ respuesta, citar todas las fuentes recuperadas
                if not fuentes_citadas and "No he encontrado informaci√≥n" not in respuesta_final:
                    fuentes_citadas = {_safe_get_source(d) for d in docs if _safe_get_source(d) != "Fuente no encontrada"}
                
                if fuentes_citadas:
                    fuentes_ordenadas = sorted(list(fuentes_citadas))
                    # Solo a√±adir la secci√≥n de fuentes si hay fuentes que citar
                    respuesta_con_fuentes = respuesta_final + "\n\n---\n**Fuentes consultadas:**\n" + "\n".join(f"‚Ä¢ {u}" for u in fuentes_ordenadas)
                    contenedor.markdown(respuesta_con_fuentes)
                    st.session_state.messages.append({"role": "assistant", "content": respuesta_con_fuentes})
                else:
                    st.session_state.messages.append({"role": "assistant", "content": respuesta_final})


                # ===============================================
                # VISTA DE ADMINISTRADOR MEJORADA PARA DEPURACI√ìN
                # ===============================================
                with st.expander("üîß Vista de Administrador - DEPUREMOS EL PROCESO"):
                    st.subheader("1. Documentos Recuperados de la Base de Datos")
                    st.info("Aqu√≠ ves el contenido COMPLETO de los documentos que el sistema encontr√≥ como potencialmente relevantes para tu pregunta. Son la 'materia prima'.")
                    for i, doc in enumerate(docs, 1):
                        with st.container(border=True):
                            fuente = _safe_get_source(doc)
                            st.write(f"**üìÑ Documento {i}:** `{fuente}`")
                            st.text_area(
                                f"Contenido completo del Documento {i}",
                                doc.page_content,
                                height=200,
                                key=f"full_doc_content_{i}"
                            )
                            st.json(doc.metadata, expanded=False)
                    
                    st.subheader("2. Contexto Enviado al Primer Analista (Extractor)")
                    st.info("Este es el texto EXACTO que se le entrega al primer modelo de IA. Es la uni√≥n de todos los documentos anteriores. Aqu√≠ es donde puede haber 'ruido' o informaci√≥n irrelevante.")
                    st.text_area("Contexto completo", contexto, height=300, key="contexto_completo_debug")
                    
                    st.subheader("3. Respuesta T√©cnica del Extractor")
                    st.info("Esta es la respuesta CRUDA del primer modelo de IA. Su √∫nica tarea es resumir los hechos del texto anterior y citar de d√≥nde los sac√≥ (ej. [DOC 1]). **Aqu√≠ podemos detectar si la primera IA ya est√° inventando o mezclando informaci√≥n.**")
                    st.text_area("Extracci√≥n t√©cnica (Salida cruda)", resp_tecnica, height=300, key="respuesta_tecnica_debug")
                    
                    st.subheader("4. Prompt Final Enviado a Eureka (El Chatbot)")
                    st.info("Estas son las instrucciones EXACTAS que recibe el chatbot final. Incluyen las 'Reglas de Oro' y la 'Respuesta T√©cnica' del paso anterior. **Si la respuesta t√©cnica es correcta pero la respuesta final es incorrecta, el problema est√° en c√≥mo la IA final interpreta estas instrucciones.**")
                    prompt_final_eureka = eureka_pt.format(**eureka_kwargs)
                    st.text_area("Prompt completo para Eureka", prompt_final_eureka, height=400, key="prompt_final_debug")

            except Exception as e:
                st.error(f"Ocurri√≥ un error: {e}")
                st.write("Intenta con otra pregunta o verifica la conexi√≥n con Ollama.")

